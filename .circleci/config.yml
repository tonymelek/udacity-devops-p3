version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws s3 rb s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --force 
            aws cloudformation delete-stack --stack-name udapeople-frontend-"${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name udapeople-backend-"${CIRCLE_WORKFLOW_ID:0:7}"
  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/XcG2rXSpmyrHrLC69Jeaxo/migration_<< parameters.workflow_id >>)
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i 
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front End Test
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back End Test
          command: |
            cd backend
            npm run test

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back End Scan
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front End Scan
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create workspace directory
          command: |
            mkdir -p workspace
      - run:
          name: add old workflow id to workspace
          command: aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text > workspace/old-id
      - run:
          name: Install tar
          command: |
            yum update 
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --query 'Reservations[*].Instances[*].PublicIpAddress' --output text > workspace/backend-ip
      - persist_to_workspace:
          root: workspace
          paths:
            - backend-ip
            - old-id
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: ubuntu
        environment:
          DEBIAN_FRONTEND: noninteractive
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["16:1e:28:18:89:a9:13:3b:8b:05:ea:9b:e4:ac:ac:16"]
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install Dependencies
          command: |
            apt update -y
            apt install -y awscli python3-pip ansible tar gzip
      - run:
          name: Configure server
          command: |
            cat /tmp/workspace/backend-ip >> ansible/inventory.txt 
            ansible-playbook -i ansible/inventory.txt  ansible/configure-server.yml
  run-migrations:
    docker:
      - image: node
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                 curl https://kvdb.io/XcG2rXSpmyrHrLC69Jeaxo/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
  deploy-frontend:
    docker:
      - image: ubuntu
        environment:
          DEBIAN_FRONTEND: noninteractive
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["16:1e:28:18:89:a9:13:3b:8b:05:ea:9b:e4:ac:ac:16"]
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install Dependencies
          command: |
            apt update -y
            apt install -y awscli tar gzip npm
      - run:
          name: Get backend url
          command: |
            cat /tmp/workspace/backend-ip
            BACKEND_IP="$(cat /tmp/workspace/backend-ip)"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" > frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            cat .env
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment
  deploy-backend:
    docker:
      - image: ubuntu
        environment:
          DEBIAN_FRONTEND: noninteractive
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["16:1e:28:18:89:a9:13:3b:8b:05:ea:9b:e4:ac:ac:16"]
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install Dependencies
          command: |
            apt update -y
            apt install -y npm python3-pip ansible tar gzip awscli
      - run:
          name: Deploy backend
          command: |
            aws s3 cp  s3://ansible-tests-0000/.env backend/
            tar -C backend -czvf artifact.tar.gz .
            echo ====================================
            ls -a
            echo ====================================
            cp artifact.tar.gz ansible/roles/deploy/files
            ls ansible/roles/deploy/files
            echo ====================================
            cat /tmp/workspace/backend-ip >> ansible/inventory.txt 
            ansible-playbook -i ansible/inventory.txt  ansible/deploy-backend.yml
      - destroy-environment
  smoke-test:
    docker:
      - image: alpine
    steps:
      - run:
          name: Install dependencies
          command: |
            apk add aws-cli nodejs npm curl
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(cat /tmp/workspace/backend-ip)
            API_URL=http://"${BACKEND_IP}":3030/api/status
            sleep 30
            if curl "${API_URL}" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              echo success
              return 0
            else
              echo fail
              return 1
            fi
      - destroy-environment
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --stack-name udaPeople \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            aws cloudfront create-invalidation \
              --distribution-id EMVR37B4ASY2Z \
              --paths "/*"
            echo old stack name= udaPeople
            echo current workflow_id= "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            yum update 
            yum install -y tar gzip
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Remove old stacks and files
          command: |
            export OLD_WORKFLOW_ID=$(cat /tmp/workspace/old-id)
            export NEW_WORKFLOW_ID="${CIRCLE_WORKFLOW_ID:0:7}"
            echo $OLD_WORKFLOW_ID
            echo $NEW_WORKFLOW_ID
            if [[ "${NEW_WORKFLOW_ID}" != "${OLD_WORKFLOW_ID}" ]]
            then
            echo cleaning up ...
            aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
            aws s3 rb s3://udapeople-"${OLD_WORKFLOW_ID}" --force 
            aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
            else
            echo no cleanup required
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-backend:
          requires:
            - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
